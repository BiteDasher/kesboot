#!/bin/bash
trapcom() {
	mv -f "$_mktemp" "/etc/kesboot.conf"
	exit 1
}
trap trapcom SIGINT SIGTERM
if [ "$(id -u)" -ne 0 ]; then
        echo "The script must be run with superuser rights" >&2
        exit 1
fi
if [ -f "/etc/kesboot.conf" ]; then
	_mktemp="$(mktemp)"
	cp -a -x "/etc/kesboot.conf" "$_mktemp"
else
	echo "Configuration file not found!" >&2
	exit 1
fi
_read1() {
	read -r -p "Where is the mounted EFI directory located? [/boot]: " _boot_dir
}
_read2() {
	read -r -p "What is the default prefix for kernels to use? [vmlinuz-] (\"-\" for nothing): " _kernel_prefix
}
_read3() {
	read -r -p "Enter the mask for initrd [initramfs-@kernel@.img] (\"-\" for nothing): " _initrd_name
}
_read4() {
	echo "-----"
	for file in "$_boot_dir"/*; do
		[ -f "$file" ] && file="${file##*/}" || continue
		if [ -n "$_initrd_name" ]; then
			[[ "$file" == ${_initrd_name/@kernel@/\*} ]] && continue
		fi
		echo "$file"
	done
	echo "-----"
	read -r -p "Enter the name of the kernel located in the $_boot_dir directory: " _kernel_to_boot
}
_read5() {
	read -r -p "Use a postscript of OS name in the name of EFI variables? [Yes] " _efi_postscript
}
_read6() {
	_ucode_test="$(for __i in "$_boot_dir"/*code*.img; do echo "$__i"; done)"
	if [ -n "$_ucode_test" ]; then
		if [ "$(echo "$_ucode_test" | wc -l)" == 1 ]; then
			_microcode="${_ucode_test##*/}"
			return 0
		fi
		echo "-----"
		for __ii in "$_boot_dir"/*code*.img; do
			echo "${__ii##*/}"
		done
		echo "-----"
		read -r -p "Enter which microcode to load: " _microcode
	fi
}
_read1
[ -z "$_boot_dir" ] && _boot_dir='/boot'
_boot_dir="${_boot_dir%/}"
if [ ! -d "$_boot_dir" ]; then
	echo "Error: directory $_boot_dir not found" >&2
	exit 1
fi
_read2
[ -z "$_kernel_prefix" ] && _kernel_prefix='vmlinuz-'
[ "$_kernel_prefix" == "-" ]  && _kernel_prefix=
_read3
[ -z "$_initrd_name" ] && _initrd_name='initramfs-@kernel@.img'
[ "$_initrd_name" == "-" ] && _initrd_name=
if [ -z "$_kernel_prefix" ]; then
	_read4
	if [ -z "$_kernel_to_boot" ]; then
		echo "Error: You didn't enter the kernel name" >&2
		exit 1
	fi
	if [ ! -f "$_boot_dir"/"$_kernel_to_boot" ]; then
		echo "Error: kernel $_kernel_to_boot not found" >&2
		exit 3
	fi
	sed "/#CMDLINES=.*/d" -i /etc/kesboot.conf
	echo "CMDLINES=(" >> /etc/kesboot.conf
	echo "'$_kernel_to_boot' ''" >> /etc/kesboot.conf
	echo ")" >> /etc/kesboot.conf
else
	for f in "$_boot_dir"/"$_kernel_prefix"*; do
		f="${f##*/}"
		eval 'f="${f/'$_kernel_prefix'/}"'
		_add+="'$f' ''\n"
	done
	if [ -z "$_add" ]; then
		echo "Error: No kernels with the $_kernel_prefix prefix were found" >&2
		exit 2
	fi
	sed "/#CMDLINES=.*/d" -i /etc/kesboot.conf
	echo "CMDLINES=(" >> /etc/kesboot.conf
	echo -e "$_add" >> /etc/kesboot.conf
	echo ")" >> /etc/kesboot.conf
fi
_read5
case "$_efi_postscript" in
	""|Y*|y*) _use_efi=1 ;;
	*) _use_efi=0 ;;
esac
_read6
_boot_dir="${_boot_dir//\//\\/}"
sed "s/#BOOT_DIR=\/boot/BOOT_DIR=$_boot_dir/" -i /etc/kesboot.conf
[ -n "$_kernel_prefix" ] && sed "s/#KERNEL_PREFIX=vmlinuz-/KERNEL_PREFIX=$_kernel_prefix/" -i /etc/kesboot.conf || \
                            sed "s/#KERNEL_PREFIX=vmlinuz-/KERNEL_PREFIX=/" -i /etc/kesboot.conf
[ -n "$_initrd_name" ] && sed "s/#INITRD_NAME=initramfs-@kernel@.img/INITRD_NAME=$_initrd_name/" -i /etc/kesboot.conf || \
                          sed "s/#INITRD_NAME=initramfs-@kernel@.img/INITRD_NAME=/" -i /etc/kesboot.conf
[ "$_use_efi" == 1 ] && sed "s/#EFIVAR_PREFIX=1/EFIVAR_PREFIX=1/" -i /etc/kesboot.conf || \
                        sed "s/#EFIVAR_PREFIX=1/EFIVAR_PREFIX=0/" -i /etc/kesboot.conf
[ -n "$_microcode" ] && sed "s/#MICROCODE=/MICROCODE=$_microcode/" -i /etc/kesboot.conf || \
	                sed "s/#MICROCODE=/MICROCODE=/" -i /etc/kesboot.conf
source /usr/share/kesboot/main.sh
source /usr/share/kesboot/default
#_lint_config || exit 1
source /etc/kesboot.conf
_check_binaries || exit $?
_check_array || exit $?
_get_efi_prefix
_found_root || exit $?
_found_boot || exit $?
_get_microcode || exit $?
_action_file
_update_kernels
_action_save
